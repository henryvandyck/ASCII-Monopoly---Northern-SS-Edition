#BlueJ class context
comment0.target=Board
comment0.text=Everything\ is\ static\!
comment1.params=
comment1.target=void\ start()
comment1.text=\ \n\ This\ is\ the\ method\ the\ player\ calls\ in\ order\ to\ start\ the\ game.\n\ It\ contains\ the\ menu,\ guide,\ and\ settings,\ and\ it\ also\ asks\ players\ to\ pick\ their\ names\ and\ symbols.\n
comment10.params=arr
comment10.target=int\ findMindex(int[])
comment10.text=\n\ Accepts\ an\ array\ (arr),\ returns\ the\ index\ of\ the\ minimum\ value\ in\ it.\n\ @param\ arr\ the\ array\ of\ which\ the\ minimum\ value\ index\ is\ returned.\n
comment11.params=arr
comment11.target=int\ findMaxdex(int[])
comment11.text=\n\ Accepts\ an\ array\ (arr),\ returns\ the\ index\ of\ the\ maximum\ value\ in\ it.\n\ @param\ arr\ the\ array\ of\ which\ the\ maximum\ value\ index\ is\ returned.\n
comment12.params=
comment12.target=int\ getTurn()
comment12.text=\n\ A\ collection\ of\ "getter\ methods".\n
comment13.params=
comment13.target=Square[]\ getGrid()
comment14.params=
comment14.target=boolean\ getOptions()
comment15.params=
comment15.target=int\ getPlayerAmount()
comment16.params=prop\ mode
comment16.target=boolean\ safeToMortgage(int,\ boolean)
comment16.text=\n\ Checks\ if\ a\ property\ adheres\ to\ certain\ parameters\ that\ would\ allow\ it\ to\ be\ mortgaged.\n\ @param\ prop\ refers\ to\ the\ index\ of\ the\ property\ that\ will\ be\ checked\n\ @param\ mode\ a\ boolean\ that\ lets\ the\ method\ act\ as\ both\ an\ interface\ for\ mortgaging\ and\ unmortgaging\ properties.\n
comment17.params=num\ arr
comment17.target=boolean\ isMember(int,\ java.util.ArrayList)
comment17.text=\n\ Given\ an\ int\ and\ an\ ArrayList\ of\ Integer,\ checks\ if\ the\ int\ is\ featured\ in\ the\ ArrayList\n\ @param\ num\ the\ number\ that\ the\ method\ is\ trying\ to\ locate\ in\ the\ ArrayList\n\ @param\ arr\ the\ ArrayList\ that\ is\ searched.\n
comment18.params=
comment18.target=boolean\ repayDebt()
comment18.text=\n\ Activates\ when\ a\ player's\ balance\ strays\ into\ the\ negative.\ This\ happens\ mostly\ when\ they\ land\ on\ a\ property\ and\ don't\n\ have\ enough\ money\ to\ pay\ the\ other\ player\ the\ demanded\ rent.\n\ This\ method\ traps\ the\ player\ until\ they've\ either\ crossed\ into\ the\ positive\ again,\ or\ done\ everything\ in\ their\ power\n\ to\ cross\ into\ the\ positive,\ but\ have\ failed.\ In\ that\ case,\ they\ are\ eliminated.\n
comment19.params=
comment19.target=int\ isGameOver()
comment19.text=\n\ Checks\ if\ the\ game\ is\ over.\n\ If\ not,\ returns\ -1.\ If\ so,\ returns\ the\ ID\ of\ the\ winner.\n
comment2.params=
comment2.target=void\ northernopolyPrint()
comment3.params=
comment3.target=void\ runGame()
comment3.text=\ \n\ The\ main\ method,\ where\ the\ game\ loop\ happens.\n\ Once\ this\ method\ is\ called,\ it\ will\ be\ running\ until\ someone\ wins\ and\ the\ game\ ends.\n
comment4.params=mode\ forced\ pNum
comment4.target=boolean\ mortgage(boolean,\ boolean,\ int)
comment4.text=\n\ Works\ in\ tandem\ with\ the\ mortgage\ method\ in\ Buyable.\n\ First,\ assembles\ a\ list\ of\ properties\ eligable\ for\ the\ player\ (pNum)\ to\ mortgage.\n\ Then,\ it\ displays\ these,\ and\ takes\ input.\n\ This\ can\ be\ "forced",\ as\ in\ you\ HAVE\ to\ mortgage\ something,\ or\ not\ forced,\ which\ lets\ you\ cancel.\n\ @param\ mode\ a\ boolean\ that\ lets\ the\ method\ act\ as\ both\ an\ interface\ for\ mortgaging\ and\ unmortgaging\ properties.\n\ @param\ forced\ a\ boolean\ that\ tells\ the\ method\ whether\ a\ mortgage\ MUST\ go\ through\ or\ whether\ it\ is\ simply\ optional.\n\ @param\ pNum\ an\ int\ that\ describes\ the\ ID\ of\ the\ player\ (un)mortgaging\ properties.\n
comment5.params=
comment5.target=void\ build()
comment5.text=\n\ The\ player\ uses\ this\ method\ to\ build\ houses/hotels\ on\ spaces\ that\ adhere\ to\ a\ set\ of\ requirements.\n\ Works\ in\ tandem\ with\ Property's\ build\ method.\n\ Works\ similarly\ to\ the\ mortgage\ method\ above,\ at\ least\ in\ structure.\n
comment6.params=pNum\ type
comment6.target=boolean\ sellProps(int,\ int)
comment6.text=\n\ Called\ when\ the\ player\ is\ in\ debt,\ to\ earn\ them\ some\ money.\n\ pNum\ refers\ to\ the\ player\ selling\ the\ properties.\n\ type\ refers\ to\ the\ mode\ of\ the\ method\:\n\ \ \ \ \ \ If\ type\ \=\=\ 2,\ they\ were\ taken\ out\ by\ the\ bank,\ and\ their\ sold\ properties\ will\ go\ up\ for\ auction\n\ \ \ \ \ \ If\ type\ \=\=\ 1,\ they\ were\ taken\ out\ by\ a\ player,\ and\ their\ sold\ properties\ will\ go\ directly\ to\ them.\n\ returns\ true\ or\ false\ depending\ on\ whether\ a\ sale\ was\ successful.\n\ @param\ pNum\ an\ int\ that\ describes\ the\ ID\ of\ the\ player\ selling\ their\ properties.\n\ @param\ type\ an\ int\ that\ tells\ the\ program\ where\ sold\ properties\ go\ after\ they\ are\ sold.\n
comment7.params=pNum\ type
comment7.target=boolean\ sellHouses(int,\ int)
comment7.text=\n\ Another\ method\ called\ when\ the\ player\ is\ in\ debt,\ needing\ to\ make\ some\ money\ by\ selling\ what\ they\ own.\n\ pNum\ refers\ to\ the\ player\ selling\ houses.\n\ type\ is\ the\ mode\ of\ the\ method\ -\ same\ as\ in\ the\ above\ method.\n\ @param\ pNum\ an\ int\ that\ describes\ the\ ID\ of\ the\ player\ selling\ their\ houses.\n\ @param\ type\ an\ int\ that\ tells\ the\ program\ where\ the\ money\ from\ sold\ houses\ goes.\n
comment8.params=prop
comment8.target=int\ evenBuildSystem(int)
comment8.text=\ \n\ Called\ by\ sellHouses()\ (above)\ -\ given\ an\ input\ of\ a\ property,\ figures\ out\ how\ to\ remove\ houses\ over\n\ the\ entire\ monopoly\ to\ ensure\ the\ even\ build\ rule\ is\ kept\ in\ place.\ Then,\ returns\ the\ amount\ of\ money\n\ that\ the\ player\ should\ be\ compensated.\n\ Even\ Build\:\ On\ a\ monopoly,\ each\ property's\ house\ count\ must\ be\ within\ 1\ of\ each\ other.\ (minimum\ +\ 1\ \=\=\ maximum)\n\ \n\ @param\ prop\ refers\ to\ the\ index\ of\ the\ property\ that\ this\ method\ is\ looking\ at\n
comment9.params=monoMems
comment9.target=int[]\ findHCounts(int[])
comment9.text=\n\ Accepts\ an\ array\ (referring\ to\ properties)\ and\ returns\ an\ array\ with\ each\ of\ their\ house\ counts.\n\ @param\ monoMems\ an\ array\ containing\ the\ set\ of\ property\ indexes\ that\ make\ up\ a\ monopoly.\n
numComments=20
